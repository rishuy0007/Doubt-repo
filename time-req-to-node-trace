/************************************************************

    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
        public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) 
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
int mintime(map<BinaryTreeNode<int>* , BinaryTreeNode<int>* > &mp , BinaryTreeNode<int> &target)
{
    queue<BinaryTreeNode<int>* > qp;
    map<BinaryTreeNode<int>* ,int > visited;

    qq.push(target);
    
   visited[target] = 1;
    int maxi = 0;



    while(!qp.empty())
    {
        int size = qp.size();
        int fl = 0;

        for(int i = 0; i<size; i++)
        {
        BinaryTreeNode<int>* node = qp.front();
            
        qp.pop();

            if(node->left && !visited[node->left])
            {
                fl = 1;
                qp.push(node->left);
                visited[node->left]= 1;
            }
            if(node->right && !visited[node->right])
            {
                fl = 1;
                qp.push(node->right);
                visited[node->right]= 1;
            }
            if(makeParent[node] && !visited[makeParent[node]])
            {
                fl = 1;
                qp.push(mp[node]);
                visited[mp[node]]= 1;
            }
        }
        if(fl) maxi++;

        
    }
    return maxi;
}
BinaryTreeNode<int>* makeParent(BinaryTreeNode<int>* root , map<BinaryTreeNode<int>* , BinaryTreeNode<int>* > &mp  , int start )
{
    BinaryTreeNode<int>* res;
    queue<BinaryTreeNode<int>* > q;
    q.push(root);


    while(!q.empty())
    {
        BinaryTreeNode<int>* node = q.front();
        q.pop();
        if(node->data == start)
        {
            res = node;
        }

        if(node->left)
        {
            mp[node->left] = node;
            q.push(node->left);
        }
        if(node->right)
        {
            mp[node->right] = node;
            q.push(node->right);
        }
        
    }
    return res;
}
int timeToBurnTree(BinaryTreeNode<int>* root, int start)
{
    
    map<BinaryTreeNode<int>* , BinaryTreeNode<int>* > mp;
    BinaryTreeNode<int>* target = makeParent(root , mp , start);
    int mx = mintime(mp , target);
    return mx;
}
