/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
     string serialize(TreeNode* root) 
     {
        if(root==NULL) return "";

        string s = "";
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty())
        {
            TreeNode* node = q.front();
            q.pop();

            if(node==NULL)
            {
                s.append("#,");
            }
            else{
                s.append(to_string(node->val)+',');
            }

            if(node!=NULL)
            {
               q.push(node->left);
               q.push(node->right);
            }
            
        }
        return s;
    }

    // Decodes your encoded data to tree.
     TreeNode* deserialize(string data) {
        if(data.size() == 0)
        return NULL;

        stringstream s(data);
        string str;

        getline(s , str , ',');

        TreeNode* root = new TreeNode(stoi(str));
        queue<TreeNode*> que ;
        que.push(root);

        while(!que.empty())
        {
            TreeNode* node = que.front();
            que.pop();

            getline(s , str , ',');
            if(str=="#")
            {
                node->left = NULL;
            }
            else
            {
                TreeNode* leftNode = new TreeNode(stoi(str));
                node->left = leftNode;
                que.push(leftNode);
            }

            getline(s , str , ',');
            if(str=="#")
            {
                node->right = NULL;
            }
            else
            {
                TreeNode* rightNode = new TreeNode(stoi(str));
                node->right = rightNode;
                que.push(rightNode);

            }
        }
        return root;
    }
};
